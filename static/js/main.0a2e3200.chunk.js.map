{"version":3,"sources":["Components/MenuBar.js","Components/MenuBar2.js","Components/Cards.js","Apis/IndexApi.js","Components/CountrySelector.js","Components/Chart.js","Components/GraphLegend.js","App.js","serviceWorker.js","index.js"],"names":["MenuBar","Navbar","className","Brand","href","Nav","Cards","data","confirmed","deaths","recovered","lastUpdate","Grid","container","spacing","justify","item","component","Card","xs","md","CardContent","Typography","gutterBottom","variant","start","duration","end","value","separator","Date","toDateString","Spinner","size","animation","url","fetchData","country","a","changeableURL","axios","get","console","log","fetchChartData","chartData","mappedchartData","map","dailyData","total","date","reportDate","fetchCountries","fetchedCountries","countries","name","CountrySelector","state","this","setState","FormControl","NativeSelect","defaultValue","onChange","e","props","handleCountryChange","target","i","key","React","Component","Chart","fetchedData","lineChart","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","GraphLegend","style","justifyContent","marginTop","App","setTimeout","MenuBar2","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0a2e3200.chunk.js","sourcesContent":["import React from \"react\";\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport ComponentCSS from \"./ComponentCSS.css\";\n\nconst MenuBar = () => {\n  return (\n    <div>\n      <Navbar className=\"navbar\">\n        <Navbar.Brand href=\"#home\" className=\"navbarValue\">\n          Covid-19\n        </Navbar.Brand>\n        <Nav className=\"mr-auto\"></Nav>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default MenuBar;\n","import React from \"react\";\nimport { Nav, Navbar } from \"react-bootstrap\";\nimport ComponentCSS from \"./ComponentCSS.css\";\n\nconst MenuBar = () => {\n  return (\n    <div>\n      <Navbar className=\"navbar2\">\n        <Navbar.Brand href=\"#home\" className=\"navbarValue2\">\n          Covid-19 Tracker\n        </Navbar.Brand>\n        <Nav className=\"mr-auto\"></Nav>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default MenuBar;\n","import React from \"react\";\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\nimport { Spinner } from \"react-bootstrap\";\nimport CountUp from \"react-countup\";\nimport ComponentCSS from \"./ComponentCSS.css\";\n\nconst Cards = ({ data: { confirmed, deaths, recovered, lastUpdate } }) => {\n  if (!confirmed) {\n    return (\n      <div>\n        <Spinner size=\"lg\" animation=\"border\" />\n        Loading...\n      </div>\n    );\n  }\n  return (\n    <div>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item component={Card} xs={12} md={3}>\n          <CardContent className=\"infected\">\n            <Typography gutterBottom>Infected</Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                duration={3}\n                end={confirmed.value}\n                separator={\",\"}\n              />\n            </Typography>\n            <Typography>{new Date(lastUpdate).toDateString()}</Typography>\n            <Typography variant=\"body2\">Active cases of COVID-19</Typography>\n          </CardContent>\n        </Grid>\n        <Grid item component={Card} xs={12} md={3}>\n          <CardContent className=\"recovered\">\n            <Typography gutterBottom>Recovered</Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                duration={5}\n                end={recovered.value}\n                separator={\",\"}\n              />\n            </Typography>\n            <Typography>{new Date(lastUpdate).toDateString()}</Typography>\n            <Typography variant=\"body2\">Recoveries from COVID-19</Typography>\n          </CardContent>\n        </Grid>\n        <Grid item component={Card} xs={12} md={3}>\n          <CardContent className=\"deaths\">\n            <Typography gutterBottom>Deaths</Typography>\n            <Typography variant=\"h5\">\n              <CountUp\n                start={0}\n                duration={7}\n                end={deaths.value}\n                separator={\",\"}\n              />\n            </Typography>\n            <Typography>{new Date(lastUpdate).toDateString()}</Typography>\n            <Typography variant=\"body2\">Deaths caused by COVID-19</Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Cards;\n","import axios from \"axios\";\nconst url = \"https://covid19.mathdro.id/api\";\n\nexport const fetchData = async (country) => {\n  var changeableURL = url;\n  if (country) {\n    changeableURL = `${url}/countries/${country}`;\n  }\n  try {\n    const {\n      data: { confirmed, recovered, deaths, lastUpdate },\n    } = await axios.get(changeableURL);\n    return { confirmed, recovered, deaths, lastUpdate };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchChartData = async () => {\n  try {\n    const chartData = await axios.get(`${url}/daily`);\n    const mappedchartData = chartData.data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate,\n    }));\n    return mappedchartData;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchCountries = async () => {\n  try {\n    const fetchedCountries = await axios.get(`${url}/countries`);\n    return fetchedCountries.data.countries.map((country) => country.name);\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import React from \"react\";\nimport { Dropdown } from \"react-bootstrap\";\nimport { fetchCountries } from \"../Apis/IndexApi\";\nimport ComponentCSS from \"./ComponentCSS.css\";\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\n\nclass CountrySelector extends React.Component {\n  state = { countries: [] };\n  async componentDidMount() {\n    const fetchedCountries = await fetchCountries();\n    this.setState({ countries: fetchedCountries });\n  }\n  render() {\n    return (\n      <FormControl>\n        <NativeSelect\n          className=\"countrySelect\"\n          defaultValue=\"\"\n          onChange={(e) => this.props.handleCountryChange(e.target.value)}\n        >\n          <option value=\"\">World</option>\n          {this.state.countries.map((country, i) => (\n            <option key={i} value={country}>\n              {country}\n            </option>\n          ))}\n        </NativeSelect>\n      </FormControl>\n    );\n  }\n}\n\nexport default CountrySelector;\n","import { fetchChartData } from \"../Apis/IndexApi\";\nimport { fetchCountries } from \"../Apis/IndexApi\";\nimport { Line, Bar } from \"react-chartjs-2\";\nimport React from \"react\";\n\nclass Chart extends React.Component {\n  state = { dailyData: [] };\n\n  async componentDidMount() {\n    const fetchedData = await fetchChartData();\n    this.setState({ dailyData: fetchedData });\n  }\n\n  render() {\n    const lineChart = this.state.dailyData ? (\n      <Line\n        data={{\n          labels: this.state.dailyData.map(({ date }) => date),\n          datasets: [\n            {\n              data: this.state.dailyData.map(({ confirmed }) => confirmed),\n              label: \"Infected\",\n              borderColor: \"yellow\",\n              fill: true,\n            },\n            {\n              data: this.state.dailyData.map(({ deaths }) => deaths),\n              label: \"Deaths\",\n              borderColor: \"red\",\n              backgroundColor: \"rgba(255,0,0,0.5)\",\n              fill: true,\n            },\n          ],\n        }}\n      />\n    ) : null;\n\n    const barChart = this.props.country ? (\n      <Bar\n        data={{\n          labels: [\"Infected\", \"Recovered\", \"Deaths\"],\n          datasets: [\n            {\n              label: \"People\",\n              backgroundColor: [\"red\", \"green\", \"blue\"],\n              data: [\n                this.props.data.confirmed.value,\n                this.props.data.recovered.value,\n                this.props.data.deaths.value,\n              ],\n            },\n          ],\n        }}\n        options={{\n          legend: { display: false },\n          title: {\n            display: true,\n            text: `Current state in ${this.props.country}`,\n          },\n        }}\n      ></Bar>\n    ) : null;\n\n    return (\n      <div className=\"chart\">{this.props.country ? barChart : lineChart}</div>\n    );\n  }\n}\n\nexport default Chart;\n","import React from \"react\";\n\nconst GraphLegend = () => {\n  return (\n    <div\n      style={{ justifyContent: \"center\", display: \"flex\", marginTop: \"23px\" }}\n    >\n      Graph Legend\n    </div>\n  );\n};\n\nexport default GraphLegend;\n","import React from \"react\";\nimport MenuBar from \"./Components/MenuBar\";\nimport MenuBar2 from \"./Components/MenuBar2\";\nimport Cards from \"./Components/Cards\";\nimport CountrySelector from \"./Components/CountrySelector\";\nimport { fetchData } from \"./Apis/IndexApi\";\nimport Chart from \"./Components/Chart\";\nimport GraphLegend from \"./Components/GraphLegend\";\n\nclass App extends React.Component {\n  state = { data: { data: {}, country: \"\" } };\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    setTimeout(() => {\n      this.setState({ data: fetchedData });\n    }, 2300);\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    this.setState({ data: fetchedData, country: country });\n    console.log(this.state);\n  };\n\n  render() {\n    const { data, country } = this.state;\n    return (\n      <div>\n        <MenuBar />\n        <CountrySelector handleCountryChange={this.handleCountryChange} />\n        <Cards data={data} />\n        <GraphLegend />\n        <Chart data={data} country={country} />\n        <MenuBar2 />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}